@model MainModel

@{
	ViewData["Title"] = "Home Page";
}
<header>
	<h1>반도체 공정 시스템</h1>
</header>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<script>
	// 개별 이력 버튼 마우스 호버 효과 적용 코드
	$(document).ready(function () {
		$(".individualHistoryButton").mouseover(function () {
			$(".individualHistoryButton .dropdown-content").stop().slideDown("fast");
		});

		$(".individualHistoryButton").mouseleave(function () {
			$(".individualHistoryButton .dropdown-content").stop().slideUp("fast");
		});

		// 드롭다운 항목 클릭 시 창 열기
		$(".individualHistoryButton .dropdown-content div").click(function () {
			var label = $(this).text();
			openNewWindow(label, 1300, 900);
		});
	});

</script>

<script>
	function openNewWindow(dataType, width, height) {
		// 현재 창의 URL을 기반으로 새 창을 엽니다.
		var newWindow = window.open('', '_blank', 'width=' + width + ',height=' + height);

		// 새 창에 스타일 및 데이터를 표시합니다.
		newWindow.document.write('<style>');
		newWindow.document.write('table {');
		newWindow.document.write('  width: 100%;');
		newWindow.document.write('  margin: 20px auto;');
		newWindow.document.write('  border-collapse: collapse;');
		newWindow.document.write('  border-radius: 10px;');
		newWindow.document.write('  overflow: hidden;');
		newWindow.document.write('}');

		newWindow.document.write('th, td {');
		newWindow.document.write('  padding: 15px;');
		newWindow.document.write('  font-weight: bold;');
		newWindow.document.write('  text-align: center;');
		newWindow.document.write('  border-bottom: 2px solid #ddd;');
		newWindow.document.write('}');

		newWindow.document.write('th {');
		newWindow.document.write('  background-color: #4CAF50;');
		newWindow.document.write('  font-weight: bold;');
		newWindow.document.write('  font-size: 16px;');
		newWindow.document.write('  color: white;');
		newWindow.document.write('}');

		newWindow.document.write('h2 {');
		newWindow.document.write('  text-align: center;');
		newWindow.document.write('  font-family: "맑은 고딕", Arial, sans-serif;');
		newWindow.document.write('  color: #333;');
		newWindow.document.write('  margin-top: 20px;');
		newWindow.document.write('  background-color: #4CAF50;');
		newWindow.document.write('  color: white;');
		newWindow.document.write('  padding: 10px;');
		newWindow.document.write('  border-radius: 10px;');
		newWindow.document.write('  font-size: 20px;');
		newWindow.document.write('}');
		newWindow.document.write('</style>');


		// 각 버튼에 따라 다른 데이터를 가져와서 출력합니다.
		if (dataType === 'totalProduction') {
			newWindow.document.write('<h2>날짜별 생산량 그래프</h2>');
			// totalProduction 데이터를 가져와야 하는 부분
	@{
		List<int> productionCounts = new List<int>();
		List<string> productionDates = new List<string>();

		if (Model.Total_historyData.Any())
		{
			var groupedData = Model.Total_historyData
			.Where(historyItem => historyItem.end_time != null)
			.GroupBy(historyItem => historyItem.end_time?.ToString("yyyy-MM-dd"));

			productionDates = groupedData.Select(group => group.Key).Where(date => date != null).Cast<string>().OrderBy(d => DateTime.Parse(d)).ToList();
			productionCounts = productionDates.Select(date => groupedData.FirstOrDefault(group => group.Key == date)?.Count() ?? 0).ToList();
		}
	}
				newWindow.document.write('<canvas id="productionChart" width="400" height="200"></canvas>');

			var ctx = newWindow.document.getElementById('productionChart').getContext('2d');
			var productionChart = new Chart(ctx, {
				type: 'line',
				data: {
					labels: [@foreach (var date in productionDates)
					{
						<text>'@date', </text>
					}],

					datasets: [{
						label: '생산량',
						data: @Json.Serialize(productionCounts),
						backgroundColor: 'rgba(75, 192, 192, 0.2)',
						borderColor: 'rgba(75, 192, 192, 1)',
						borderWidth: 1
					}]
				},
				options: {
					scales: {
						y: {
							beginAtZero: true
						}
					}
				}
			});
		} else if (dataType === 'totalDefectRate') {
			newWindow.document.write('<h2>날짜별 불량 갯수 그래프</h2>');
			// 여기에 해당 데이터를 가져와서 출력하는 코드를 추가하세요.
	@{
		List<int> gradeDCounts = new List<int>();
		List<string> gradeDDates = new List<string>();

		if (Model.Total_historyData.Any())
		{
			var gradeDData = Model.Total_historyData
			.Where(historyItem => historyItem.start_time != null && historyItem.grade == "D")
			.GroupBy(historyItem => historyItem.start_time?.ToString("yyyy-MM-dd"));

			gradeDDates = gradeDData.Select(group => group.Key).Where(date => date != null).Cast<string>().OrderBy(d => DateTime.Parse(d)).ToList();
			gradeDCounts = gradeDDates.Select(date => gradeDData.FirstOrDefault(group => group.Key == date)?.Count() ?? 0).ToList();
		}
	}
				newWindow.document.write('<canvas id="gradeDChart" width="400" height="200"></canvas>');

			var ctxGradeD = newWindow.document.getElementById('gradeDChart').getContext('2d');
			var gradeDChart = new Chart(ctxGradeD, {
				type: 'line',
				data: {
					labels: [@foreach (var date in gradeDDates)
	{
		<text>'@date', </text>
	}],

					datasets: [{
						label: '불량품 갯수',
						data: @Json.Serialize(gradeDCounts),
						backgroundColor: 'rgba(255, 99, 132, 0.2)', // Adjust color as needed
						borderColor: 'rgba(255, 99, 132, 1)',
						borderWidth: 1
					}]
				},
				options: {
					scales: {
						y: {
							beginAtZero: true
						}
					}
				}
			});
		} else if (dataType === 'fullHistory') {
			newWindow.document.write('<h2>전체 이력 데이터</h2>');
			// 서버에서 받아온 데이터를 HTML 테이블로 출력합니다.
			newWindow.document.write('<table>');
			newWindow.document.write('<tr>');
			newWindow.document.write('<th>LOT ID</th>');
			newWindow.document.write('<th>SERIAL</th>');
			newWindow.document.write('<th>시작 시간</th>');
			newWindow.document.write('<th>끝난 시간</th>');
			newWindow.document.write('<th>소요 시간</th>');
			newWindow.document.write('<th>산화공정_IDX</th>');
			newWindow.document.write('<th>포토공정_IDX</th>');
			newWindow.document.write('<th>증착공정_IDX</th>');
			newWindow.document.write('<th>패키지공정_IDX</th>');
			newWindow.document.write('<th>등급</th>');
			newWindow.document.write('</tr>');
	// 데이터를 역순으로 반복하여 출력
	@for (var i = Model.Total_historyData.Count - 1; i >= 0; i--)
	{
		var historyItem = Model.Total_historyData[i];
		@:newWindow.document.write('<tr>');
		@:newWindow.document.write('<td>' + '@historyItem.lot_id' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.serial' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.start_time' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.end_time' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.spend_time' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.process1_idx' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.process2_idx' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.process3_idx' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.process4_idx' + '</td>');
		@:newWindow.document.write('<td>' + '@historyItem.grade' + '</td>');
		@:newWindow.document.write('</tr>');
	}
		newWindow.document.write('</table>');
		} else if (dataType === 'individualHistory') {
			newWindow.document.write('<h2>개별 이력 데이터</h2>');
		}
		else if (dataType === '산화 공정') {
			// 서버에서 받아온 데이터를 HTML 테이블로 출력합니다.
			newWindow.document.write('<h2>산화 공정 데이터</h2>');
			newWindow.document.write('<table>');
			newWindow.document.write('<tr>');
			newWindow.document.write('<th>IDX</th>');
			newWindow.document.write('<th>LOT ID</th>');
			newWindow.document.write('<th>SERIAL</th>');
			newWindow.document.write('<th>시작 시간</th>');
			newWindow.document.write('<th>끝난 시간</th>');
			newWindow.document.write('<th>소요 시간</th>');
			newWindow.document.write('<th>센서값</th>');
			newWindow.document.write('<th>등급</th>');
			newWindow.document.write('</tr>');

	// 데이터를 역순으로 반복하여 출력
	@for (var i = Model.process1Data.Count - 1; i >= 0; i--)
	{
		var process1Item = Model.process1Data[i];
		@:newWindow.document.write('<tr>');
		@:newWindow.document.write('<td>' + '@process1Item.idx' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.lot_id' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.serial' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.start_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.end_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.spend_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.value' + '</td>');
		@:newWindow.document.write('<td>' + '@process1Item.grade' + '</td>');
		@:newWindow.document.write('</tr>');
	}
		newWindow.document.write('</table>');

		} else if (dataType === '포토 공정') {
			newWindow.document.write('<h2>포토 공정 데이터</h2>');
			// 서버에서 받아온 데이터를 HTML 테이블로 출력합니다.
			newWindow.document.write('<table>');
			newWindow.document.write('<tr>');
			newWindow.document.write('<th>IDX</th>');
			newWindow.document.write('<th>LOT ID</th>');
			newWindow.document.write('<th>SERIAL</th>');
			newWindow.document.write('<th>시작 시간</th>');
			newWindow.document.write('<th>끝난 시간</th>');
			newWindow.document.write('<th>소요 시간</th>');
			newWindow.document.write('<th>센서값</th>');
			newWindow.document.write('<th>등급</th>');
			newWindow.document.write('</tr>');

			// 데이터를 역순으로 반복하여 출력
	@for (var i = Model.process2Data.Count - 1; i >= 0; i--)
	{
		var process2Item = Model.process2Data[i];
		@:newWindow.document.write('<tr>');
		@:newWindow.document.write('<td>' + '@process2Item.idx' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.lot_id' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.serial' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.start_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.end_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.spend_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.value' + '</td>');
		@:newWindow.document.write('<td>' + '@process2Item.grade' + '</td>');
		@:newWindow.document.write('</tr>');
	}
		newWindow.document.write('</table>');

		} else if (dataType === '증착 공정') {
			newWindow.document.write('<h2>증착 공정 데이터</h2>');
			// 서버에서 받아온 데이터를 HTML 테이블로 출력합니다.
			newWindow.document.write('<table>');
			newWindow.document.write('<tr>');
			newWindow.document.write('<th>IDX</th>');
			newWindow.document.write('<th>LOT ID</th>');
			newWindow.document.write('<th>SERIAL</th>');
			newWindow.document.write('<th>시작 시간</th>');
			newWindow.document.write('<th>끝난 시간</th>');
			newWindow.document.write('<th>소요 시간</th>');
			newWindow.document.write('<th>센서값</th>');
			newWindow.document.write('<th>등급</th>');
			newWindow.document.write('</tr>');

			// 데이터를 역순으로 반복하여 출력
	@for (var i = Model.process3Data.Count - 1; i >= 0; i--)
	{
		var process3Item = Model.process3Data[i];
		@:newWindow.document.write('<tr>');
		@:newWindow.document.write('<td>' + '@process3Item.idx' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.lot_id' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.serial' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.start_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.end_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.spend_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.value' + '</td>');
		@:newWindow.document.write('<td>' + '@process3Item.grade' + '</td>');
		@:newWindow.document.write('</tr>');
	}
		newWindow.document.write('</table>');

		} else if (dataType === '패키지 공정') {
			newWindow.document.write('<h2>패키지 공정 데이터</h2>');
			// 서버에서 받아온 데이터를 HTML 테이블로 출력합니다.
			newWindow.document.write('<table>');
			newWindow.document.write('<tr>');
			newWindow.document.write('<th>IDX</th>');
			newWindow.document.write('<th>LOT ID</th>');
			newWindow.document.write('<th>SERIAL</th>');
			newWindow.document.write('<th>시작 시간</th>');
			newWindow.document.write('<th>끝난 시간</th>');
			newWindow.document.write('<th>소요 시간</th>');
			newWindow.document.write('<th>센서값</th>');
			newWindow.document.write('<th>등급</th>');
			newWindow.document.write('</tr>');

			// 데이터를 역순으로 반복하여 출력
	@for (var i = Model.process4Data.Count - 1; i >= 0; i--)
	{
		var process4Item = Model.process4Data[i];
		@:newWindow.document.write('<tr>');
		@:newWindow.document.write('<td>' + '@process4Item.idx' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.lot_id' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.serial' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.start_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.end_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.spend_time' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.value' + '</td>');
		@:newWindow.document.write('<td>' + '@process4Item.grade' + '</td>');
		@:newWindow.document.write('</tr>');
	}
		newWindow.document.write('</table>');

		// 기준값 변경 페이지
		} else if (dataType === 'change') {
			newWindow.document.write('<style>');
			newWindow.document.write('.box-container { display: flex; flex-wrap: wrap; }');
			newWindow.document.write('.box { width: calc(23% - 20px); border-radius: 5px; margin: 10px; padding: 5px; height: 70px; display: flex; flex-direction: column; justify-content: center; align-items: center; border: 3px solid #4CAF50; box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.3); }');
			newWindow.document.write('.box label { text-align: center; font-weight: bold; margin-bottom: 5px; }');
			newWindow.document.write('.button-container { display: flex; justify-content: space-between; margin-top: 5px; }');
			newWindow.document.write('.button { width: 70px; height: 30px; box-sizing: border-box; padding: 5px; margin-right: 10px; margin-left: 10px; border: 1px solid #4CAF50; border-radius: 5px; background-color: #4CAF50; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center; }');
			newWindow.document.write('.box input { width: calc(100% - 10px); height: 30px; margin-bottom: 10px; box-sizing: border-box; }');
			newWindow.document.write('</style>');

			function createBoxContainer(sensorCount, Linename) {
				newWindow.document.write('<div class="box-container">');
				for (var i = 1; i <= sensorCount; i++) {
					var label;
					if (Linename == "final") {
						label = '최종 ' + String.fromCharCode(65 + i - 1) + ' 기준';
					} else if (Linename == "direction") {
						label = '최종 ' + String.fromCharCode(65 + i - 1) + ' 방향';
					} else if (Linename == "top") {
						if (i == 1) {
							label = '회로인쇄율 A(이하)';
						}
						else if (i == 2) {
							label = '단차 A(이상)';
						}
						else if (i == 3){
							label = '전도성 A(이상)';
						}
						else if (i == 4) {
							label = '반사율 A(이하)';
						}
						else{

						}
					} else if (Linename == "mid") {
						if (i == 1) {
							label = '회로인쇄율 B(이하)';
						}
						else if (i == 2) {
							label = '단차 B(이상)';
						}
						else if (i == 3) {
							label = '전도성 B(이상)';
						}
						else if (i == 4) {
							label = '반사율 B(이하)';
						}
						else {

						}
					} else if (Linename == "bottom") {
						if (i == 1) {
							label = '회로인쇄율 (이상)';
						}
						else if (i == 2) {
							label = '단차 (이하)';
						}
						else if (i == 3) {
							label = '전도성 (이하)';
						}
						else if (i == 4) {
							label = '반사율 (이상)';
						}
						else {

						}
					}

					newWindow.document.write('<div class="box">');
					newWindow.document.write('<label>' + label + '</label>');
					if (Linename == "final") {
						if (i == 1) {
							newWindow.document.write('<input type="number" id="A_final" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].A_final">');
						}
						else if (i == 2) {
							newWindow.document.write('<input type="number" id="B_final" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].B_final">');
						}
						else{
							newWindow.document.write('<input type="number" id="C_final" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].C_final">');
						}
					}
					else if (Linename == "direction") {
						// 최종 방향이면 버튼 추가
						newWindow.document.write('<div class="button-container">');
						if (i == 1) {
							var dicr1 = "@Model.referenceData[0].A_direction.ToString()";
							if (dicr1 == "left") {
								newWindow.document.write('<div class="button" id="1L" onclick="prevDirection()" style="background-color:#006B3E" disabled>왼쪽</div>');
								newWindow.document.write('<div class="button" id="1R" onclick="nextDirection()">오른쪽</div>');
							}
							else {
								newWindow.document.write('<div class="button" id="1L" onclick="prevDirection()">왼쪽</div>');
								newWindow.document.write('<div class="button" id="1R" onclick="nextDirection()" style="background-color:#006B3E" disabled>오른쪽</div>');
							}
						}
						else if (i == 2) {
							var dicr2 = "@Model.referenceData[0].B_direction.ToString()";
							if (dicr2 == "left") {
								newWindow.document.write('<div class="button" id="2L" onclick="prevDirection()" style="background-color:#006B3E" disabled>왼쪽</div>');
								newWindow.document.write('<div class="button" id="2R" onclick="nextDirection()">오른쪽</div>');
							}
							else {
								newWindow.document.write('<div class="button" id="2L" onclick="prevDirection()">왼쪽</div>');
								newWindow.document.write('<div class="button" id="2R" onclick="nextDirection()" style="background-color:#006B3E" disabled>오른쪽</div>');
							}
						}
						else if (i == 3) {
							var dicr3 = "@Model.referenceData[0].C_direction.ToString()";
							if (dicr3 == "left") {
								newWindow.document.write('<div class="button" id="3L" onclick="prevDirection()" style="background-color:#006B3E" disabled>왼쪽</div>');
								newWindow.document.write('<div class="button" id="3R" onclick="nextDirection()">오른쪽</div>');
							}
							else {
								newWindow.document.write('<div class="button" id="3L" onclick="prevDirection()">왼쪽</div>');
								newWindow.document.write('<div class="button" id="3R" onclick="nextDirection()" style="background-color:#006B3E" disabled>오른쪽</div>');
							}
						}
						
						newWindow.document.write('</div>');
					}
					else {
						if (Linename == "top") {
							if (i == 1) {
								newWindow.document.write('<input type="number" id="top1" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].top1">');
							}
							else if (i == 2) {
								newWindow.document.write('<input type="number" id="top2" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].top2">');
							}
							else if (i == 3) {
								newWindow.document.write('<input type="number" id="top3" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].top3">');
							}
							else {
								newWindow.document.write('<input type="number" id="top4" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].top4">');
							}
						}
						else if (Linename == "mid") {
							if (i == 1) {
								newWindow.document.write('<input type="number" id="mid1" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].mid1">');
							}
							else if (i == 2) {
								newWindow.document.write('<input type="number" id="mid2" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].mid2">');
							}
							else if (i == 3) {
								newWindow.document.write('<input type="number" id="mid3" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].mid3">');
							}
							else {
								newWindow.document.write('<input type="number" id="mid4" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].mid4">');
							}
						} 
						else if (Linename == "bottom") {
							if (i == 1) {
								newWindow.document.write('<input type="number" id="bottom1" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].bottom1">');
							}
							else if (i == 2) {
								newWindow.document.write('<input type="number" id="bottom2" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].bottom2">');
							}
							else if (i == 3) {
								newWindow.document.write('<input type="number" id="bottom3" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].bottom3">');
							}
							else {
								newWindow.document.write('<input type="number" id="bottom4" step="0.01" placeholder="값을 입력하세요." value="@Model.referenceData[0].bottom4">');
							}
						}
						
					}
					newWindow.document.write('</div>');
				}
				newWindow.document.write('</div>');
			}

			newWindow.document.write('<h2>A, B, C 등급 기준값</h2>');
			createBoxContainer(4, "top");
			createBoxContainer(4, "mid");

			newWindow.document.write('<h2 style="margin-top: 20px;">불량(D 등급) 기준값</h2>');
			createBoxContainer(4, "bottom");

			// 최종 기준값 추가
			newWindow.document.write('<h2 style="margin-top: 20px;">최종 기준값</h2>');
			createBoxContainer(3, "final"); // 3개의 박스 추가, isFinal 인자에 true 전달

			// 최종 방향 소제목 추가
			newWindow.document.write('<h2 style="margin-top: 20px;">최종 방향</h2>');
			// 최종 방향 박스 추가
			createBoxContainer(3, "direction"); // 3개의 박스 추가, isDirection 인자에 true 전달

			newWindow.document.write('</div>');

			// 버튼 추가
			newWindow.document.write('<style>');
			newWindow.document.write('.custom-button {');
			newWindow.document.write('  position: fixed;');
			newWindow.document.write('  right: 50px;');
			newWindow.document.write('  bottom: 55px;');
			newWindow.document.write('  background-color: #4CAF50;');
			newWindow.document.write('  color: #fff;');
			newWindow.document.write('  padding: 10px;');
			newWindow.document.write('  border-radius: 10px;');
			newWindow.document.write('  cursor: pointer;');
			newWindow.document.write('  transition: background-color 0.3s;');
			newWindow.document.write('  width: 100px;'); // 조절 가능
			newWindow.document.write('  height: 40px;'); // 조절 가능
			newWindow.document.write('  display: flex;'); // 중앙 정렬을 위한 Flexbox 사용
			newWindow.document.write('  justify-content: center;'); // 가로 방향 중앙 정렬
			newWindow.document.write('  align-items: center;'); // 세로 방향 중앙 정렬
			newWindow.document.write('  font-size: 20px;'); // 조절 가능
			newWindow.document.write('  font-weight: bold;'); // 조절 가능
			newWindow.document.write('}');
			newWindow.document.write('.custom-button:hover {');
			newWindow.document.write('  background-color: #45a049;');
			newWindow.document.write('}');
			newWindow.document.write('</style>');
			newWindow.document.write('<div class="custom-button">값 적용</div>');
	}
		newWindow.document.write('<div style="overflow: auto;">');

		// 버튼 클릭 이벤트
		newWindow.document.querySelector('.custom-button').addEventListener('click', function () {
			newWindow.document.querySelector('.custom-button').textContent = "적용 됨";

			var b1 = "";
			var b2 = "";
			var b3 = "";

			if (newWindow.document.getElementById('1L').disabled == true) {
				b1 = "left";
			}
			else{
				b1 = "right";
			}
			if (newWindow.document.getElementById('2L').disabled == true){
				b2 = "left";
			}
			else{
				b2 = "right";
			}
			if (newWindow.document.getElementById('3L').disabled == true) {
				b3 = "left";
			}
			else {
				b3 = "right";
			}

			const jsonData = {
				top1: parseFloat(newWindow.document.getElementById('top1').value),
				top2: parseFloat(newWindow.document.getElementById('top2').value),
				top3: parseFloat(newWindow.document.getElementById('top3').value),
				top4: parseFloat(newWindow.document.getElementById('top4').value),
				mid1: parseFloat(newWindow.document.getElementById('mid1').value),
				mid2: parseFloat(newWindow.document.getElementById('mid2').value),
				mid3: parseFloat(newWindow.document.getElementById('mid3').value),
				mid4: parseFloat(newWindow.document.getElementById('mid4').value),
				bottom1: parseFloat(newWindow.document.getElementById('bottom1').value),
				bottom2: parseFloat(newWindow.document.getElementById('bottom2').value),
				bottom3: parseFloat(newWindow.document.getElementById('bottom3').value),
				bottom4: parseFloat(newWindow.document.getElementById('bottom4').value),
				A_final: parseFloat(newWindow.document.getElementById('A_final').value),
				B_final: parseFloat(newWindow.document.getElementById('B_final').value),
				C_final: parseFloat(newWindow.document.getElementById('C_final').value),
				A_direction: b1, 
				B_direction: b2, 
				C_direction: b3 
			};

			// jsonData 객체가 유효한 값을 갖고 있는지 확인
			if (jsonData && typeof jsonData === 'object') {
				// JSON.stringify 사용
				const referenceData = JSON.stringify(jsonData);

				// 이제 jsonString을 사용하여 서버로 전송
				fetch('/pi/start/reference', {
					method: 'POST',
					body: referenceData,
					headers: {
						'Content-Type': 'application/json',
						'Accept': '*/*'
					}
				})
					.then(response => response.json())
					.then(data => {
						// 응답에서 받아온 데이터를 처리 (이 부분은 상황에 따라 다를 수 있습니다.)
						console.log(data);
						// 이후 필요한 동작을 수행하세요.
					})
					.catch(error => {
						console.error('Error:', error);
					});
			} else {
				console.error('jsonData is not a valid object');
			}
			location.reload(); //새로고침
		});
		newWindow.document.getElementById('1L').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('1L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('1R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = '#006B3E'; // 왼쪽 버튼 색상 변경
			leftButton.disabled = true;
			rightButton.style.backgroundColor = ''; // 오른쪽 버튼 색상 원래대로
			rightButton.disabled = false;
		});
		newWindow.document.getElementById('1R').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('1L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('1R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = ''; // 왼쪽 버튼 색상 원래대로
			leftButton.disabled = false;
			rightButton.style.backgroundColor = '#006B3E'; // 오른쪽 버튼 색상 변경
			rightButton.disabled = true;
		});
		newWindow.document.getElementById('2L').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('2L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('2R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = '#006B3E'; // 왼쪽 버튼 색상 변경
			leftButton.disabled = true;
			rightButton.style.backgroundColor = ''; // 오른쪽 버튼 색상 원래대로
			rightButton.disabled = false;
		});
		newWindow.document.getElementById('2R').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('2L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('2R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = ''; // 왼쪽 버튼 색상 원래대로
			leftButton.disabled = false;
			rightButton.style.backgroundColor = '#006B3E'; // 오른쪽 버튼 색상 변경
			rightButton.disabled = true;
		});
		newWindow.document.getElementById('3L').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('3L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('3R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = '#006B3E'; // 왼쪽 버튼 색상 변경
			leftButton.disabled = true;
			rightButton.style.backgroundColor = ''; // 오른쪽 버튼 색상 원래대로
			rightButton.disabled = false;
		});
		newWindow.document.getElementById('3R').addEventListener('click', function () {
			var leftButton = newWindow.document.getElementById('3L'); // 왼쪽 버튼 요소
			var rightButton = newWindow.document.getElementById('3R'); // 오른쪽 버튼 요소

			leftButton.style.backgroundColor = ''; // 왼쪽 버튼 색상 원래대로
			leftButton.disabled = false;
			rightButton.style.backgroundColor = '#006B3E'; // 오른쪽 버튼 색상 변경
			rightButton.disabled = true;
		});


		newWindow.document.write('</div>');

	}
	
</script>

<!-- 스타일 추가 -->
<style>
	body {
		align-items: center;
		justify-content: center;
		height: 100vh;
		margin: 0;
		background-color: #f4f4f4; /* 밝은 회색 배경 */
		font-family: 'Arial', sans-serif; /* 표준 글꼴 선택 */
	}

	header {
		background-color: #333; /* 헤더의 어두운 배경 */
		color: #fff; /* 헤더의 흰색 텍스트 */
		padding: 0.3vw;
		text-align: center;
	}

	.wrapperBox {
		position: absolute;
		top: 130px;
		left: 400px;
		display: flex;
		flex-wrap: wrap; /* 상자가 다음 줄로 넘어갈 수 있게 함 */
		justify-content: center; /* 상자를 수평으로 가운데 정렬 */
	}

	.subBox1, .subBox2, .subBox3, .subBox4, .horizontalBox, .additionalSubBox1, .additionalSubBox2, .additionalSubBox3, .additionalSubBox4, .additionalSubBox5,
	.additionalSubBox6, .additionalSubBox7, .additionalSubBox8, .circle, .fullHistoryButton, .GradeBox1, .GradeBox2, .GradeBox3, .GradeBox4, .individualHistoryButton, .startButton, .totalDefectRateButton, .totalProductionButton, .lotSerialBox {
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.7); /* 은은한 박스 그림자 추가 */
	}

	.subBox1 {
		position: absolute;
		top: 0px;
		left: 0px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 300px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.subBox2 {
		position: absolute;
		top: 0px;
		left: 280px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 300px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}
	.subBox3 {
		position: absolute;
		top: 0px;
		left: 560px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 300px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.subBox4 {
		position: absolute;
		top: 0px;
		left: 840px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 300px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}
	.processInfo {
		font-size: 18px;
		font-weight: bold;
		margin-bottom: 20px;
	}

	.innerBox {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-top: 10px; /* 간격 조절 */
	}

	.labelBox {
		font-weight: bold;
		border: 1px solid #000;
		display: block;
		margin: 10px; /* 간격 조절 */
		padding: 10px;
		box-sizing: border-box; /* 박스 크기를 padding까지 포함하여 계산 */
		border-radius: 5px; /* 테두리 둥글게 조절 */
		width: 130%; /* 가로 길이 조절 */
	}

	/* 공정 진행 박스 */
	.horizontalBox {
		position: absolute;
		top: 330px;
		left: 10px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 1100px; /* 가로 길이 조절 */
		height: 100px; /* 세로 길이 조절 */
		border-radius: 10px; /* 테두리 둥글게 조절 */
		margin-left: 5%; /* 왼쪽 여백 조절 */
		margin-right: 5%; /* 오른쪽 여백 조절 */
	}
	/* 화살표 */
	.arrow {
		width: 20px;
		height: 0;
		border-style: solid;
		display: inline-block;
		margin: 0 18px;
		transform: translateY(-15px); /* 화살표를 위로 15픽셀 이동 */
	}
	/* 원 */
	.circle {
		width: 20px;
		height: 20px;
		background-color: #000;
		border-radius: 40%;
		display: inline-block;
		margin: 0 92px;
		transform: translateY(-15px); /* 화살표를 위로 15픽셀 이동 */
	}

	/* 이미지 스타일 추가 */
	.additionalSubBox1 img,
	.additionalSubBox2 img,
	.additionalSubBox3 img,
	.additionalSubBox4 img {
		width: 90px; /* 이미지의 가로 크기 조절 */
		height: 70px; /* 이미지의 세로 크기 조절 */
		object-fit: cover; /* 이미지 비율 유지 */
	}

	/* 8개의 박스 */
	.additionalSubBox1 {
		position: absolute;
		top: 460px;
		left: 0px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox2 {
		position: absolute;
		top: 460px;
		left: 280px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox3 {
		position: absolute;
		top: 460px;
		left: 560px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox4 {
		position: absolute;
		top: 460px;
		left: 840px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox5 {
		position: absolute;
		top: 640px;
		left: 0px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox6 {
		position: absolute;
		top: 640px;
		left: 280px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox7 {
		position: absolute;
		top: 640px;
		left: 560px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.additionalSubBox8 {
		position: absolute;
		top: 640px;
		left: 840px;
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	/* 랏번호 및 시리얼 박스 */
	.lotSerialBox {
		position: absolute;
		top: 150px;
		left: 90px;
		width: 200px; /* 가로 길이를 설정합니다. */
		display: block;
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	/* 랏번호 및 시리얼 박스 안 글씨 */
	.lotSerialLabel {
		font-weight: bold;
		margin-bottom: 3px;
		padding-left: 10px;
	}

	/* 오늘 총 생산량 버튼 */
	.totalProductionButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 300px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 90px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	.totalProductionLabel {
		font-weight: bold;
		margin-bottom: 5px;
	}

	/* 전체 불량률 버튼 */
	.totalDefectRateButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 390px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 90px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	.totalDefectRateLabel {
		font-weight: bold;
		margin-bottom: 5px;
	}
	/* 등급 상자 */
	.GradeBox1 {
		position: absolute;
		top: 530px;
		left: 120px;
		display: block;
		width: 150px; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel1 {
		font-weight: bold;
		margin-bottom: 5px;
		padding-left: 10px;
	}

	.GradeBox2 {
		position: absolute;
		top: 600px;
		left: 120px;
		display: block;
		width: 150px; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel2 {
		font-weight: bold;
		margin-bottom: 5px;
		padding-left: 10px;
	}

	.GradeBox3 {
		position: absolute;
		top: 670px;
		left: 120px;
		display: block;
		width: 150px; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel3 {
		font-weight: bold;
		margin-bottom: 5px;
		padding-left: 10px;
	}

	.GradeBox4 {
		position: absolute;
		top: 740px;
		left: 120px;
		display: block;
		width: 150px; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel4 {
		font-weight: bold;
		margin-bottom: 5px;
		padding-left: 10px;
	}

	/* 시작 버튼 */
	.startButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 850px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 90px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	/* 전체 이력 버튼 */
	.fullHistoryButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 150px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 1620px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	/* 개별 이력 버튼 */
	.individualHistoryButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 240px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 1620px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
		transition: transform 0.3s ease;
	}

		.individualHistoryButton:hover {
			transform: scale(0.95);
		}

		/* 드롭다운 스타일 */
		.individualHistoryButton .dropdown-content {
			display: none;
			position: absolute;
			background-color: black;
			box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
			z-index: 1;
			width: 200px; /* 개별 이력 버튼과 같은 가로 길이 */
			top: 60px; /* 버튼 아래로 나타나도록 설정 */
			/* 테두리의 꼭지점을 둥글게 조절합니다. */
			border-radius: 5px;
		}

		.individualHistoryButton .dropdown-content div {
			padding: 12px 16px;
			display: block;
			color: white;
			text-decoration: none;
			width: 100%; /* 100%로 설정하여 부모의 가로 길이에 맞춤 */
			box-sizing: border-box; /* padding을 포함한 전체 가로 길이를 유지 */
		}

		/* 개별 이력 버튼 라벨에 호버 효과 */
		.individualHistoryButton .dropdown-content div:hover {
			text-decoration: underline;
			transform: scale(1.05); /* 예시로 1.05배 크기로 확대하도록 설정 */
		}

	/* 기준 값 변경하기 버튼 */
	.changeButton {
		font-size: 19px;
		font-weight: bold;
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 850px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 1620px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 200px;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

		/* 버튼이 안으로 들어가는 효과 */
		.totalProductionButton,
		.totalDefectRateButton,
		.startButton,
		.fullHistoryButton,
		.individualHistoryButton,
		.changeButton{
			transition: transform 0.3s ease; /* transform 속성에 대한 0.3초 동안의 변화를 부드럽게 적용 */
		}

		.totalProductionButton:hover,
		.totalDefectRateButton:hover,
		.startButton:hover,
		.fullHistoryButton:hover,
		.individualHistoryButton:hover,
		.changeButton:hover{
			transform: scale(0.95); /* hover 상태에서 버튼을 0.95배 축소시킴 */
		}

	.processValue{
		font-size: 35px;
		font-weight: bold;
		margin-top: 10px;
	}
</style>
<!-- 새 윈도우 페이지 뜨게 하는 코드 -->
<divbutton button class="totalProductionButton" onclick="openNewWindow('totalProduction', 1000, 600)">전체 생산량</divbutton>
<divbutton button class="totalDefectRateButton" onclick="openNewWindow('totalDefectRate', 1000, 600)">전체 불량 갯수</divbutton>
<button button class="startButton" disabled>대 기 ...</button>
<divbutton button class="fullHistoryButton" onclick="openNewWindow('fullHistory', 1700, 900)">전체 이력</divbutton>
<divbutton button class="individualHistoryButton">
	개별 이력
	<div class="dropdown-content">
		<div>산화 공정</div>
		<div>포토 공정</div>
		<div>증착 공정</div>
		<div>패키지 공정</div>
	</div>
</divbutton>
<divbutton button class="changeButton" onclick="openNewWindow('change', 900, 900)">기준 값 변경</divbutton>

<!-- 랏시리얼 박스의 DB값이 없을 경우 공백으로 처리하는 예외처리 코드 -->
@if (Model.Total_historyData.Count > 0)
{
	<div class="lotSerialBox">
		<div class="lotSerialLabel" data-process="LodID">LOT ID : @Model.Total_historyData[Model.Total_historyData.Count - 1].lot_id</div>
		<div class="lotSerialLabel" data-process="Serial">SERIAL : @Model.Total_historyData[Model.Total_historyData.Count - 1].serial</div>
	</div>
}
else
{
	<div class="lotSerialBox">
		<div class="lotSerialLabel"></div>
	</div>
}


<div class="GradeBox1">
	<div class="GradeLabel1">A 등급 : @Model.Total_historyData.Count(data => data.grade == "A")</div>
</div>

<div class="GradeBox2">
	<div class="GradeLabel2">B 등급 : @Model.Total_historyData.Count(data => data.grade == "B")</div>
</div>

<div class="GradeBox3">
	<div class="GradeLabel3">C 등급 : @Model.Total_historyData.Count(data => data.grade == "C")</div>
</div>

<div class="GradeBox4">
	<div class="GradeLabel4">D 등급 : @Model.Total_historyData.Count(data => data.grade == "D")</div>
</div>


<div class="wrapperBox">
	<!-- 첫 번째 상자 -->
	<div class="subBox1">
		<div class="processInfo">포토 공정</div>
		<div class="innerBox">
			<div class="labelBox" data-process="total">총수량 : @Model.process1Data.Count</div>
			<div class="labelBox" data-process="defect">불량품 : @Model.Total_historyData.Count(data => data.grade == "D" && data.process1_idx != null && data.process2_idx == null) </div>
			<div class="labelBox" data-process="percent">불량률 : @((Model.Total_historyData.Count(data => data.grade == "D" && data.process1_idx != null && data.process2_idx == null) * 100.0 / Model.process1Data.Count).ToString("F2"))%</div>
		</div>
	</div>

	<!-- 두 번째 상자 -->
	<div class="subBox2">
		<div class="processInfo">식각 공정</div>
		<div class="innerBox">
			<div class="labelBox" data-process="total">총수량 : @Model.process2Data.Count</div>
			<div class="labelBox" data-process="defect">불량품 : @Model.Total_historyData.Count(data => data.grade == "D" && data.process2_idx != null && data.process3_idx == null) </div>
			<div class="labelBox" data-process="percent">불량률 : @((Model.Total_historyData.Count(data => data.grade == "D" && data.process2_idx != null && data.process3_idx == null) * 100.0 / Model.process2Data.Count).ToString("F2"))%</div>
		</div>
	</div>

	<!-- 세 번째 상자 -->
	<div class="subBox3">
		<div class="processInfo">EDS 공정</div>
		<div class="innerBox">
			<div class="labelBox" data-process="total">총수량 : @Model.process3Data.Count</div>
			<div class="labelBox" data-process="defect">불량품 : @Model.Total_historyData.Count(data => data.grade == "D" && data.process3_idx != null && data.process4_idx == null)</div>
			<div class="labelBox" data-process="percent">불량률 : @((Model.Total_historyData.Count(data => data.grade == "D" && data.process3_idx != null && data.process4_idx == null) * 100.0 / Model.process3Data.Count).ToString("F2"))%</div>
		</div>
	</div>

	<!-- 네 번째 상자 -->
	<div class="subBox4">
		<div class="processInfo">EUV 공정</div>
		<div class="innerBox">
			<div class="labelBox" data-process="total">총수량 : @Model.process4Data.Count</div>
			<div class="labelBox" data-process="defect">불량품 : @Model.Total_historyData.Count(data => data.grade == "D" && data.process4_idx != null)</div>
			<div class="labelBox" data-process="percent">불량률 : @((Model.Total_historyData.Count(data => data.grade == "D" && data.process4_idx != null) * 100.0 / Model.process4Data.Count).ToString("F2"))%</div>
		</div>
	</div>

	<!-- 공정 진행 상자 -->
	<div class="horizontalBox">
		<div class="processInfo">공정 진행</div>

		<!-- 첫 번째 원과 화살표 -->
		<div class="circle" data-process="IMAGE_IR_SENSOR_PIN" style="margin-left: 110px;"></div>
		<div class="arrow" style="margin-left: 25px; border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>

		<!-- 두 번째 원과 화살표 -->
		<div class="circle" data-process="SONIC_IR_SENSOR_PIN_NO1" style="margin-left: 30px;"></div>
		<div class="circle" data-process="SONIC_IR_SENSOR_PIN_NO2" style="margin-left: -30px;"></div>
		<div class="arrow" style="margin-left: -15px; border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>

		<!-- 세 번째 원과 화살표 -->
		<div class="circle" data-process="RELAY_IR_SENSOR_PIN" style="margin-left: 80px;"></div>
		<div class="arrow" style="margin-left: 20px; border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>

		<!-- 네 번째 원 -->
		<div class="circle" data-process="LIGHT_IR_SENSOR_PIN" style="margin-left: 80px;"></div>
	</div>

	<!-- 8 개의 상자 -->
	<div class="additionalSubBox1">
		<div class="processInfo">포토 공정</div>
		<img src="~/images/OFF.png">
	</div>

	<div class="additionalSubBox2">
		<div class="processInfo">식각 공정</div>
		<img src="~/images/OFF.png">
	</div>

	<div class="additionalSubBox3">
		<div class="processInfo">EDS 공정</div>
		<img src="~/images/OFF.png">
	</div>

	<div class="additionalSubBox4">
		<div class="processInfo">EUV 공정</div>
		<img src="~/images/OFF.png">
	</div>

	<div class="additionalSubBox5">
		<div class="processInfo">회로인쇄율</div>
		<div class="processValue"> 
			@{
				// 해당 조건의 데이터 가져오기
				var processData1 = Model.process1Data.FirstOrDefault(data => data.lot_id == Model.Total_historyData[Model.Total_historyData.Count - 1].lot_id
				&& data.serial == @Model.Total_historyData[Model.Total_historyData.Count - 1].serial);

				// processData가 null이면 공백, 아니면 processData.value 출력
				var valueToShow1 = processData1 != null ? processData1.value.ToString() : string.Empty;
			}
			@valueToShow1
				</div>
	</div>

	<div class="additionalSubBox6">
		<div class="processInfo">단차</div>
		<div class="processValue">
			@{
				// 해당 조건의 데이터 가져오기
				var processData2 = Model.process2Data.FirstOrDefault(data => data.lot_id == Model.Total_historyData[Model.Total_historyData.Count - 1].lot_id
				&& data.serial == @Model.Total_historyData[Model.Total_historyData.Count - 1].serial);

				// processData가 null이면 공백, 아니면 processData.value 출력
				var valueToShow2 = processData2 != null ? processData2.value.ToString() : string.Empty;
			}
			@valueToShow2
		</div>
	</div>

	<div class="additionalSubBox7">
		<div class="processInfo">전도성</div>
		<div class="processValue">
			@{
				// 해당 조건의 데이터 가져오기
				var processData3 = Model.process3Data.FirstOrDefault(data => data.lot_id == Model.Total_historyData[Model.Total_historyData.Count - 1].lot_id
				&& data.serial == @Model.Total_historyData[Model.Total_historyData.Count - 1].serial);

				// processData가 null이면 공백, 아니면 processData.value에 따라 pass fail 출력
				var valueToShow3 = string.Empty;
				if (processData3 != null)
				{
					if (processData3.value == 1)
					{
						valueToShow3 = "Pass";
					}
					else if (processData3.value == 0)
					{
						valueToShow3 = "Fail";
					}
					else
					{
						valueToShow3 = "Error";
					}
				}
			}
			@valueToShow3
		</div>
	</div>

	<div class="additionalSubBox8">
		<div class="processInfo">반사율</div>
		<div class="processValue">
			@{
				// 해당 조건의 데이터 가져오기
				var processData4 = Model.process4Data.FirstOrDefault(data => data.lot_id == Model.Total_historyData[Model.Total_historyData.Count - 1].lot_id
				&& data.serial == @Model.Total_historyData[Model.Total_historyData.Count - 1].serial);

				// processData가 null이면 공백, 아니면 processData.value 출력
				var valueToShow4 = string.Empty;
				if (processData4 != null)
				{
					if (processData4.value == 1)
					{
						valueToShow4 = "Fail";
					}
					else if (processData4.value == 0)
					{
						valueToShow4 = "Pass";
					}
					else
					{
						valueToShow4 = "Error";
					}
				}
			}
			@valueToShow4
		</div>
	</div>
</div>


<!-- HTML 파일에서 SignalR 클라이언트 코드를 작성 -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.min.js"></script>

<script>
	const connection = new signalR.HubConnectionBuilder()
		.withUrl("/SensorHub") // 위에서 매핑한 허브 경로
		.build();

	connection.start().then(() => { //연결 확인
		@*
		const startButton = document.querySelector('.startButton');
		startButton.textContent = "test";
		*@
	}).catch(err => console.error(err.toString()));

	connection.on("ActivateButton", function (buttonState) {
		// 여기서 버튼의 색상이나 활성화 여부 등을 변경
		if (buttonState === "startButton") {
			const startButton = document.querySelector('.startButton');
			startButton.disabled = false; // 버튼 활성화
			startButton.style.backgroundColor = 'green'; // 색상을 원하는 값으로 변경
			startButton.innerHTML = '시 작'; // 버튼 안의 텍스트 변경

			////센서값들 빈값으로 변경
			document.querySelector('.additionalSubBox5 .processValue').textContent = "";
			document.querySelector('.additionalSubBox6 .processValue').textContent = "";
			document.querySelector('.additionalSubBox7 .processValue').textContent = "";
			document.querySelector('.additionalSubBox8 .processValue').textContent = "";

		}
		else if (buttonState === "endbutton"){
			//start버튼 비활성화
			const startButton = document.querySelector('.startButton');
			startButton.disabled = true; // 버튼 활성화
			startButton.style.backgroundColor = ''; // 색상을 원하는 값으로 변경
			startButton.innerHTML = '대 기 ...'; // 버튼 안의 텍스트 변경
		}
	});
	connection.on("DetectState", function (name, state) {
		if (state === "detected") {
			if (name == "IMAGE_IR_SENSOR") {
				//id에 따라 물체감지 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="IMAGE_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = 'green';
				}
			}
			else if (name == "SONIC_IR_SENSOR_NO1") {
				//id에 따라 물체감지 상태로 변경
				//2차 공정 시작 화면 표시
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="SONIC_IR_SENSOR_PIN_NO1"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = 'green';
				}
				document.querySelector(".additionalSubBox2 img").src = "/images/ON.png";
			}
			else if (name == "SONIC_IR_SENSOR_NO2") {
				//2차 공정의 1번센서 물체 없음 상태로 변경
				//id에 따라 물체감지 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="SONIC_IR_SENSOR_PIN_NO2"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = 'green';
				}
				const secondCircle = document.querySelector('.horizontalBox .circle[data-process="SONIC_IR_SENSOR_PIN_NO1"]');
				if (secondCircle) {
					secondCircle.style.backgroundColor = '';
				}
			} 
			else if (name == "RELAY_IR_SENSOR") {
				//id에 따라 물체감지 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="RELAY_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = 'green';
				}
			} 
			else if (name == "LIGHT_IR_SENSOR") {
				//id에 따라 물체감지 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="LIGHT_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = 'green';
				}
			}
			
		}
		else if (state == "noting"){
			if (name == "IMAGE_IR_SENSOR") {
				// id에 따라 물체없음 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="IMAGE_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = '';
				}
			}
			else if (name == "SONIC_IR_SENSOR_NO1") {
				// id에 따라 물체없음 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="SONIC_IR_SENSOR_PIN_NO1"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = '';
				}

			}
			else if (name == "SONIC_IR_SENSOR_NO2") {
				// id에 따라 물체없음 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="SONIC_IR_SENSOR_PIN_NO2"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = '';
				}
			}
			else if (name == "RELAY_IR_SENSOR") {
				// id에 따라 물체없음 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="RELAY_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = '';
				}
			}
			else if (name == "LIGHT_IR_SENSOR") {
				// id에 따라 물체없음 상태로 변경
				const firstCircle = document.querySelector('.horizontalBox .circle[data-process="LIGHT_IR_SENSOR_PIN"]');
				if (firstCircle) {
					firstCircle.style.backgroundColor = '';
				}
			}
		}
	});
	connection.on("WorkingState", function (name, state, fail) {
		if (state === "working") {
			if (name == "photolithography") {
				// id에 따라 공정 작동중으로 변경
				document.querySelector(".additionalSubBox1 img").src ="/images/ON.png";
			}
			else if (name == "etching") {
				// id에 따라 공정 작동중으로 변경
				document.querySelector(".additionalSubBox2 img").src = "/images/ON.png";
			}
			else if (name == "eds") {
				// id에 따라 공정 작동중으로 변경
				document.querySelector(".additionalSubBox3 img").src = "/images/ON.png";
			}
			else if (name == "euvLithography") {
				// id에 따라 공정 작동중으로 변경
				document.querySelector(".additionalSubBox4 img").src = "/images/ON.png";
			}
		}
		else if (state === "end"){
			if (name == "photolithography") {
				// id에 따라 공정 끝 상태로 표시, 수량, 불량률 화면 수정
				document.querySelector(".additionalSubBox1 img").src = "/images/OFF.png";

				const total = document.querySelector('.wrapperBox .subBox1 .innerBox [data-process="total"]');
				const defect = document.querySelector('.wrapperBox .subBox1 .innerBox [data-process="defect"]');
				const defp = document.querySelector('.wrapperBox .subBox1 .innerBox [data-process="percent"]');

				let totalnumber = 0;
				let defnum = 0;
				let defpnum = 0;
				const regex = /[^0-9]/g;

				if (total) {
					const str = total.textContent;
					const result = str.replace(regex, "");
					totalnumber = parseInt(result);
					totalnumber = totalnumber + 1;
					total.textContent = "총수량 : " + totalnumber.toString();
				}
				if (defect) {
					const str = defect.textContent;
					const result = str.replace(regex, "");
					defnum = parseInt(result);
					if (fail === "fail") {
						// 불량 업데이트
						defnum = defnum + 1;
						defect.textContent = "불량품 : " + defnum.toString();
					}
				}
				if (defp) {
					defpnum = (defnum / totalnumber) * 100;
					defp.textContent = "불량률 : " + defpnum.toFixed(2).toString() + "%";
				}
			}
			else if (name == "etching") {
				// id에 따라 공정 끝 상태로 표시 ,수량, 불량률 화면 수정
				document.querySelector(".additionalSubBox2 img").src = "/images/OFF.png";

				const total = document.querySelector('.wrapperBox .subBox2 .innerBox [data-process="total"]');
				const defect = document.querySelector('.wrapperBox .subBox2 .innerBox [data-process="defect"]');
				const defp = document.querySelector('.wrapperBox .subBox2 .innerBox [data-process="percent"]');

				let totalnumber = 0;
				let defnum = 0;
				let defpnum = 0;
				const regex = /[^0-9]/g;

				if (total) {
					const str = total.textContent;
					const result = str.replace(regex, "");
					totalnumber = parseInt(result);
					totalnumber = totalnumber + 1;
					total.textContent = "총수량 : " + totalnumber.toString();
				}
				if (defect) {
					const str = defect.textContent;
					const result = str.replace(regex, "");
					defnum = parseInt(result);
					if (fail === "fail") {
						// 불량 업데이트
						defnum = defnum + 1;
						defect.textContent = "불량품 : " + defnum.toString();
					}
				}
				if (defp) {
					defpnum = (defnum / totalnumber) * 100;
					defp.textContent = "불량률 : " + defpnum.toFixed(2).toString() + "%";
				}

			}
			else if (name == "eds") {
				// id에 따라 공정 끝 상태로 표시 ,수량, 불량률 화면 수정
				document.querySelector(".additionalSubBox3 img").src = "/images/OFF.png";

				const total = document.querySelector('.wrapperBox .subBox3 .innerBox [data-process="total"]');
				const defect = document.querySelector('.wrapperBox .subBox3 .innerBox [data-process="defect"]');
				const defp = document.querySelector('.wrapperBox .subBox3 .innerBox [data-process="percent"]');

				let totalnumber = 0;
				let defnum = 0;
				let defpnum = 0;
				const regex = /[^0-9]/g;

				if (total) {
					const str = total.textContent;
					const result = str.replace(regex, "");
					totalnumber = parseInt(result);
					totalnumber = totalnumber + 1;
					total.textContent = "총수량 : " + totalnumber.toString();
				}
				if (defect) {
					const str = defect.textContent;
					const result = str.replace(regex, "");
					defnum = parseInt(result);
					if (fail === "fail") {
						// 불량 업데이트
						defnum = defnum + 1;
						defect.textContent = "불량품 : " + defnum.toString();
					}
				}
				if (defp) {
					defpnum = (defnum / totalnumber) * 100;
					defp.textContent = "불량률 : " + defpnum.toFixed(2).toString() + "%";
				}

			}
			else if (name == "euvLithography") {
				// id에 따라 공정 끝 상태로 표시 ,수량, 불량률 화면 수정
				document.querySelector(".additionalSubBox4 img").src = "/images/OFF.png";

				const total = document.querySelector('.wrapperBox .subBox4 .innerBox [data-process="total"]');
				const defect = document.querySelector('.wrapperBox .subBox4 .innerBox [data-process="defect"]');
				const defp = document.querySelector('.wrapperBox .subBox4 .innerBox [data-process="percent"]');

				let totalnumber = 0;
				let defnum = 0;
				let defpnum = 0;
				const regex = /[^0-9]/g;

				if (total) {
					const str = total.textContent;
					const result = str.replace(regex, "");
					totalnumber = parseInt(result);
					totalnumber = totalnumber + 1;
					total.textContent = "총수량 : " + totalnumber.toString();
				}
				if (defect) {
					const str = defect.textContent;
					const result = str.replace(regex, "");
					defnum = parseInt(result);
				}
				if (defp) {
					defpnum = (defnum / totalnumber) * 100;
					defp.textContent = "불량률 : " + defpnum.toFixed(2).toString() + "%";
				}

			}
		}
	});
	connection.on("setValue", function (name, value) {
		if (name == "photolithography") {
			// id에 따라 센서값 화면에 표시
			document.querySelector('.additionalSubBox5 .processValue').textContent = value;
		}
		else if (name == "etching") {
			// id에 따라 센서값 화면에 표시
			document.querySelector('.additionalSubBox6 .processValue').textContent = value;
		}
		else if (name == "eds") {
			// id에 따라 센서값 화면에 표시
			if (value == 1) {
				document.querySelector('.additionalSubBox7 .processValue').textContent = "pass";
			}
			else if( value == 0){
				document.querySelector('.additionalSubBox7 .processValue').textContent = "fail";
			}
			else{
				document.querySelector('.additionalSubBox7 .processValue').textContent = "error";
			}
		}
		else if (name == "euvLithography") {
			// id에 따라 센서값 화면에 표시
			if (value == 1) {
				document.querySelector('.additionalSubBox8 .processValue').textContent = "fail";
			}
			else if (value == 0) {
				document.querySelector('.additionalSubBox8 .processValue').textContent = "pass";
			}
			else {
				document.querySelector('.additionalSubBox8 .processValue').textContent = "error";
			}
		}
	});
	connection.on("SetLotID", function (lotid, serial) {
		const SetLotID = document.querySelector('.lotSerialBox .lotSerialLabel[data-process="LodID"]');
		if (SetLotID) {
			SetLotID.textContent = 'LOT ID : ' + lotid;
		}
		const Serial = document.querySelector('.lotSerialBox .lotSerialLabel[data-process="Serial"]');
		if (Serial) {
			Serial.textContent = 'SERIAL : ' + serial;
		}
	});
	connection.on("SetList", function (state) {
		if (state === "reload") {
			//화면 초기화
			location.reload();
		}
		else if (state === "total") {
			// DB에서 전체이력, 개별이력, (오늘 총 생산량, 전체 불량률)을 불러와 업데이트
			if (newWindow) { //작동안됨
				newWindow.location.reload();
			}
		}

	});


</script>


<script>
	// 버튼 클릭 시 서버로 요청을 보내고 isPressed 값을 변경하는 함수
	document.querySelector('.startButton').addEventListener('click', function () {

		const startButton = document.querySelector('.startButton');
		startButton.style.backgroundColor = 'red'; // 색상 빨강
		startButton.disabled = true; // 버튼 비활성화

		////센서값 비우기

		// 시작시간 저장, ispressed = true
		fetch('/pi/start/toggle', {
			method: 'POST', // 또는 'GET' 등 요청 메서드 지정
		})
			.then(response => response.json())
			.then(data => {
				// 응답에서 받아온 데이터를 처리 (이 부분은 상황에 따라 다를 수 있습니다.)
				console.log(data);
				// 이후 필요한 동작을 수행하세요.
			})
			.catch(error => {
				console.error('Error:', error);
			});
	});
</script>