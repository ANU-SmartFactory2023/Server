@model MainModel

@{
	ViewData["Title"] = "Home Page";
}

<!-- 스타일 추가 -->
<style>
	body {
		align-items: center;
		justify-content: center;
		height: 100vh;
		margin: 0;
	}

	.wrapperBox {
		display: flex;
		flex-wrap: wrap; /* 상자가 다음 줄로 넘어갈 수 있게 함 */
		justify-content: center; /* 상자를 수평으로 가운데 정렬 */
	}

	.subBox {
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 260px;
		height: 300px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
	}

	.processInfo {
		font-weight: bold;
		margin-bottom: 20px;
	}

	.innerBox {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-top: 10px; /* 간격 조절 */
	}

	.labelBox {
		border: 1px solid #000;
		display: block;
		margin: 10px; /* 간격 조절 */
		padding: 10px;
		box-sizing: border-box; /* 박스 크기를 padding까지 포함하여 계산 */
		border-radius: 5px; /* 테두리 둥글게 조절 */
		width: 130%; /* 가로 길이 조절 */
	}

	/* 공정 진행 박스 */
	.horizontalBox {
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 1100px; /* 가로 길이 조절 */
		height: 100px; /* 세로 길이 조절 */
		border-radius: 10px; /* 테두리 둥글게 조절 */
		margin-left: 5%; /* 왼쪽 여백 조절 */
		margin-right: 5%; /* 오른쪽 여백 조절 */
	}

	.arrow {
		width: 30px;
		height: 0;
		border-style: solid;
		display: inline-block;
		margin: 0 25px;
		transform: translateY(-15px); /* 화살표를 위로 15픽셀 이동 */
	}

	.circle {
		width: 20px;
		height: 20px;
		background-color: #000;
		border-radius: 40%;
		display: inline-block;
		margin: 0 90px;
		transform: translateY(-15px); /* 화살표를 위로 15픽셀 이동 */
	}

	/* 8개의 박스 */
	.additionalSubBox {
		border: 1px solid #000;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
		width: 200px;
		height: 150px;
		display: flex;
		flex-direction: column;
		align-items: center;
		border-radius: 10px; /* 테두리 둥글게 조절 */
		/* 한 줄에 4개씩 배치 */
		flex-basis: 20%;
	}

	/* 랏번호 및 시리얼 박스 */
	.lotSerialBox {
		position: absolute;
		top: 90px;
		left: 80px;
		display: block;
		width: 8%; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	/* 랏번호 및 시리얼 박스 안 글씨 */
	.lotSerialLabel {
		font-weight: bold;
		margin-bottom: 5px;
	}

	/* 오늘 총 생산량 버튼 */
	.totalProductionButton {
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 230px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 80px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 8%;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	.totalProductionLabel {
		font-weight: bold;
		margin-bottom: 5px;
	}

	/* 전체 불량률 버튼 */
	.totalDefectRateButton {
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 310px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 80px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 8%;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	.totalDefectRateLabel {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.GradeBox1 {
		position: absolute;
		top: 440px;
		left: 80px;
		display: block;
		width: 8%; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel1 {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.GradeBox2 {
		position: absolute;
		top: 500px;
		left: 80px;
		display: block;
		width: 8%; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel2 {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.GradeBox3 {
		position: absolute;
		top: 560px;
		left: 80px;
		display: block;
		width: 8%; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel3 {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.GradeBox4 {
		position: absolute;
		top: 620px;
		left: 80px;
		display: block;
		width: 8%; /* 가로 길이 조절 */
		flex-direction: column;
		align-items: center;
		border: 1px solid #000;
		padding: 10px;
		box-sizing: border-box;
		border-radius: 5px;
	}

	.GradeLabel4 {
		font-weight: bold;
		margin-bottom: 5px;
	}

	.startButton {
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 740px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 80px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 8%;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	/* 전체 이력 버튼 */
	.fullHistoryButton {
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 90px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 1500px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 8%;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

	/* 개별 이력 버튼 */
	.individualHistoryButton {
		/* position 속성을 사용하여 요소의 위치를 설정합니다. */
		position: absolute;
		/* 요소의 위쪽에서의 위치를 설정합니다. */
		top: 170px;
		/* 요소의 왼쪽에서의 위치를 설정합니다. */
		left: 1500px;
		/* display 속성을 사용하여 Flexbox 레이아웃을 설정합니다. */
		display: flex;
		/* flex-direction 속성을 사용하여 주축을 세로로 설정합니다. */
		flex-direction: column;
		/* align-items 속성을 사용하여 주축 방향으로 요소들을 가운데 정렬합니다. */
		align-items: center;
		/* justify-content 속성을 사용하여 교차축 방향으로 요소들을 가운데 정렬합니다. */
		justify-content: center;
		/* 세로 길이를 설정합니다. */
		height: 70px;
		/* 가로 길이를 설정합니다. */
		width: 8%;
		/* box-sizing 속성을 사용하여 요소의 크기 계산 방식을 설정합니다. */
		box-sizing: border-box;
		/* cursor 속성을 사용하여 마우스 커서 스타일을 설정합니다. */
		cursor: pointer;
		/* 배경 색상을 설정합니다. */
		background-color: #000;
		/* 텍스트 색상을 설정합니다. */
		color: #fff;
		/* 테두리를 제거합니다. */
		border: 1px solid #000;
		/* 테두리의 꼭지점을 둥글게 조절합니다. */
		border-radius: 5px;
	}

		/* 버튼이 안으로 들어가는 효과 */
		.totalProductionButton,
		.totalDefectRateButton,
		.startButton,
		.fullHistoryButton,
		.individualHistoryButton {
			transition: transform 0.3s ease; /* transform 속성에 대한 0.3초 동안의 변화를 부드럽게 적용 */
		}
		.totalProductionButton:hover,
		.totalDefectRateButton:hover,
		.startButton:hover,
		.fullHistoryButton:hover,
		.individualHistoryButton:hover {
			transform: scale(0.95); /* hover 상태에서 버튼을 0.95배 축소시킴 */
		}
</style>

<divbutton button class="totalProductionButton" onclick="openNewWindow()">오늘 총 생산량</divbutton>
<divbutton button class="totalDefectRateButton" onclick="openNewWindow()">전체 불량률</divbutton>
<divbutton button class="startButton" onclick="openNewWindow()">START</divbutton>
<divbutton button class="fullHistoryButton" onclick="openNewWindow()">전체 이력</divbutton>
<divbutton button class="individualHistoryButton" onclick="openNewWindow()">개별 이력</divbutton>

<!--예외처리해야함. DB에 아무것도 없을 때 불러올 수 없다고 오류남-->
<div class="lotSerialBox">
	<div class="lotSerialLabel">LOT ID : @Model.Total_historyData[Model.Total_historyData.Count -1].lot_id</div>
	<div class="lotSerialLabel">SERIAL : @Model.Total_historyData[Model.Total_historyData.Count - 1].serial</div>
</div>


<div class="GradeBox1">
	<div class="GradeLabel1">1등급 :</div>
	<!-- 총 생산량 값이 있다면 여기에 추가하세요 -->
	<div><!-- 여기에 총 생산량 값 입력 --></div>
</div>

<div class="GradeBox2">
	<div class="GradeLabel2">2등급 :</div>
	<!-- 총 생산량 값이 있다면 여기에 추가하세요 -->
	<div><!-- 여기에 총 생산량 값 입력 --></div>
</div>

<div class="GradeBox3">
	<div class="GradeLabel3">3등급 :</div>
	<!-- 총 생산량 값이 있다면 여기에 추가하세요 -->
	<div><!-- 여기에 총 생산량 값 입력 --></div>
</div>

<div class="GradeBox4">
	<div class="GradeLabel4">4등급 :</div>
	<!-- 총 생산량 값이 있다면 여기에 추가하세요 -->
	<div><!-- 여기에 총 생산량 값 입력 --></div>
</div>


<div class="wrapperBox">
	<!-- 첫 번째 상자 -->
	<div class="subBox">
		<div class="processInfo">웨이퍼 제조, 산화 공정</div>
		<div class="innerBox">
			<div class="labelBox">총수량 : @Model.process1Data.Count</div>
			<div class="labelBox">불량품 : </div>
			<div class="labelBox">불량률 :</div>
		</div>
	</div>

	<!-- 두 번째 상자 -->
	<div class="subBox">
		<div class="processInfo">포토, 식각 공정</div>
		<div class="innerBox">
			<div class="labelBox">총수량 : @Model.process2Data.Count</div>
			<div class="labelBox">불량품 :</div>
			<div class="labelBox">불량률 :</div>
		</div>
	</div>

	<!-- 세 번째 상자 -->
	<div class="subBox">
		<div class="processInfo">증착, 금속배선 공정</div>
		<div class="innerBox">
			<div class="labelBox">총수량 : @Model.process3Data.Count</div>
			<div class="labelBox">불량품 :</div>
			<div class="labelBox">불량률 :</div>
		</div>
	</div>

	<!-- 네 번째 상자 -->
	<div class="subBox">
		<div class="processInfo">EDS, 패키징 공정</div>
		<div class="innerBox">
			<div class="labelBox">총수량 : @Model.process4Data.Count</div>
			<div class="labelBox">불량품 :</div>
			<div class="labelBox">불량률 :</div>
		</div>
	</div>

	<!-- 가로로 긴 상자 추가 -->
	<div class="horizontalBox">
		<div class="processInfo">공정 진행</div>

		<!-- 4개의 원 -->
		<div class="circle"></div>
		<div class="arrow" style="border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>
		<div class="circle"></div>
		<div class="arrow" style="border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>
		<div class="circle"></div>
		<div class="arrow" style="border-width: 10px 0 10px 20px; border-color: transparent transparent transparent #000;"></div>
		<div class="circle"></div>
	</div>

	<!-- 8 개의 상자 -->
	<div class="additionalSubBox">
		<div class="processInfo">웨이퍼 제조, 산화 공정</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">포토, 식각 공정</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">증착, 금속배선 공정</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">EDS, 패키징 공정</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">무게</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">진동</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">밝기</div>
	</div>

	<div class="additionalSubBox">
		<div class="processInfo">온도</div>
	</div>
</div>


<!-- HTML 파일에서 SignalR 클라이언트 코드를 작성 -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.min.js"></script>

<script>
	const connection = new signalR.HubConnectionBuilder()
		.withUrl("/SensorHub") // 위에서 매핑한 허브 경로
		.build();

	connection.start().then(() => { //연결 확인
		@*
		const startButton = document.querySelector('.startButton');
		startButton.textContent = "test";
		*@
	}).catch(err => console.error(err.toString()));

	connection.on("ActivateButton", function (buttonState) {
		// 여기서 버튼의 색상이나 활성화 여부 등을 변경
		if (buttonState === "startButton") {
			const startButton = document.querySelector('.startButton');
			startButton.style.backgroundColor = '#00FF00'; // 색상을 원하는 값으로 변경
		}
		else if (buttonState === "pushbutton"){
			//start버튼 누르면 버튼 누름 상태로 변경(화면변경, startController가 알아야함)
		}
		else if (buttonState === "endbutton"){
			//start버튼 비활성화
		}
	});
	connection.on("DetectState", function (id, state) {
		if (state === "detected") {
			if (id == 1) {
				//id에 따라 물체감지 상태로 변경
			}
			
		}
		else if (state == "noting"){
			if(id == 1){
				// id에 따라 물체없음 상태로 변경
			}
		}
	});
	connection.on("WorkingState", function (id, state) {
		if (state === "working") {
			if (id == 1) {
				// id에 따라 공정 작동중으로 변경
			}
		}
		else if (state === "end"){
			if (id == 1) {
				// id에 따라 공정 끝 상태로 표시
			}
		}
	});
	connection.on("setValue", function (id, setValue) {
		if (state === "setValue ") {
			if (id == 1) {
				// id에 따라 센서값 화면에 표시
			}
		}
	});

			// 다른 코드 및 이벤트 핸들러들을 추가할 수 있습니다.
</script>